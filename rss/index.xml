<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[I dream of dream]]></title><description><![CDATA[My personal space for writing & online sharing of thoughts]]></description><link>https://mnishihan.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sun, 18 Jun 2017 11:37:04 GMT</lastBuildDate><atom:link href="https://mnishihan.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Vuex Quick Ref]]></title><description><![CDATA[<div class="sect1">
<h2 id="_store">Store</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Instanciated with <code><code>Vuex.Store(options)</code></code> constructor</p>
</li>
<li>
<p>Injected into child components as <code><code>this.$store</code></code> to enable easy access</p>
</li>
<li>
<p>Properties of <code><code>options</code></code> object are described below.</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_state">state</h3>
<div class="ulist">
<ul>
<li>
<p><code><code>state</code></code> is the reactive data stored into a vuex <code><code>store</code></code> and very similar to the <code><code>data</code></code> property in options for component constructor.</p>
</li>
<li>
<p><code><code>state</code></code> variables are usually exposed as <code><code>computed</code></code> properties to enable easy access within components.</p>
</li>
<li>
<p><code><code>mapState</code></code></p>
</li>
<li>
<p>A utility function to mix &amp; expose <code><code>state</code></code> variables as <code><code>computed</code></code> properties in components.</p>
</li>
<li>
<p>Imported as <code><code>import { mapState } from 'vuex'</code></code></p>
</li>
<li>
<p>Returns object, so it can be used to merge with local <code><code>computed</code></code> properties of components using [object spread](#) syntax,  i.e. <code><code>&#8230;&#8203;mapState({})</code></code></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_getters">getters</h3>
<div class="ulist">
<ul>
<li>
<p><code><code>getters</code></code> is for vuex <code><code>store</code></code> what <code><code>computed</code></code> is for components.</p>
</li>
<li>
<p><code><code>getters</code></code> are also exposed through <code><code>computed</code></code> properties to enable easy access within components.</p>
</li>
<li>
<p>Signature of <strong>getter</strong> is <code><code>getterName: function(state, getters) { /** &#8230;&#8203; */ }</code></code></p>
</li>
<li>
<p>Arguments can also be passed to getters by returning a function. This is particularly useful when querying an array in the store is required.</p>
</li>
<li>
<p><code><code>mapGetters</code></code></p>
</li>
<li>
<p>A utility function to mix &amp; expose <code><code>getters</code></code> in <code><code>computed</code></code> within components.</p>
</li>
<li>
<p>Imported as <code><code>import { mapGetters } from 'vuex'</code></code></p>
</li>
<li>
<p>Returns object, so it can be used to merge with local <code><code>computed</code></code> properties of components using [object spread](#) syntax,  i.e. <code><code>&#8230;&#8203;mapGetters({})</code></code></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_mutations">mutations</h3>
<div class="ulist">
<ul>
<li>
<p><code><code>mutations</code></code> is an object to define <strong>mutator</strong> methods in vuex <code><code>store</code></code> which are allowed &amp; responsible to modify store&#8217;s <code><code>state</code></code>.</p>
</li>
<li>
<p>It is not permissible to modify <code><code>state</code></code> directly in vuex stores, so <strong>mutators</strong> are needed.</p>
</li>
<li>
<p>Signature of <strong>mutator</strong> is <code><code>mutatorName: function(state, [payload]) { /** &#8230;&#8203; */ }</code></code></p>
</li>
<li>
<p>To invoke a <strong>mutator</strong>, you need to call <code><code>store.commit(mutation, [payload])</code></code> with its <code><code>name</code></code> and it&#8217;s optional <code><code>payload</code></code>.</p>
</li>
<li>
<p><code><code>mutations</code></code> must be synchronous.</p>
</li>
<li>
<p><code><code>mapMutations</code></code></p>
</li>
<li>
<p>A utility function to mix &amp; expose <code><code>mutations</code></code> as component <code><code>methods</code></code> that invokes respective mutation via <code><code>store.commit</code></code>.</p>
</li>
<li>
<p>Imported as <code><code>import { mapMutations } from 'vuex'</code></code></p>
</li>
<li>
<p>Returns object, so it can be used to merge with local <code><code>methods</code></code> option of components using [object spread](#) syntax,  i.e. <code><code>&#8230;&#8203;mapMutations({})</code></code></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_actions">actions</h3>
<div class="ulist">
<ul>
<li>
<p>Actions are similar to mutations, the differences being that:</p>
</li>
<li>
<p>Instead of mutating the state, actions commit mutations.</p>
</li>
<li>
<p>Actions can contain arbitrary asynchronous operations.</p>
</li>
<li>
<p>Action handlers receive a <code><code>context</code></code> object which exposes the same set of methods/properties on the <code><code>store</code></code> instance, so you can call <code><code>context.commit</code></code> to commit a mutation, or access the <code><code>state</code></code> and <code><code>getters</code></code> via <code><code>context.state</code></code> and <code><code>context.getters</code></code> respectively.</p>
</li>
<li>
<p>Actions are triggered with the <code><code>store.dispatch(actionName, payload)</code></code> method.</p>
</li>
</ul>
</div>
</div>
</div>
</div>]]></description><link>https://mnishihan.github.io/2017/06/18/Vuex-Quick-Ref.html</link><guid isPermaLink="true">https://mnishihan.github.io/2017/06/18/Vuex-Quick-Ref.html</guid><dc:creator><![CDATA[M N Islam Shihan]]></dc:creator><pubDate>Sun, 18 Jun 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Installing PHP erlang bridge on centos 6.2]]></title><description><![CDATA[<div class="paragraph">
<p>This post is kinda a reference &amp; checklist for me to be used in future, as the installation of <a href="http://code.google.com/p/mypeb/">PHP Erlang Bridge</a> (peb) wasn’t as simple to follow the installation steps stated in INSTALL file in the source package. If you’ve come across this page by any chance, may be it will be helpful for you as well.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Step 1: Install erlang and this is really easy</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">sudo yum install erlang</code></pre>
</div>
</div>
</li>
<li>
<p>Step 2: Install php-devel package if you already didn’t.  This package will provide the phpize tool that you’ll require to build the peb and any other php extensions) from source</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">sudo yum install php-devel</code></pre>
</div>
</div>
</li>
<li>
<p>Step 3: Download and extract latest source archive of peb from <a href="http://code.google.com/p/mypeb/downloads/list">here</a> and phpize</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">wget http://mypeb.googlecode.com/files/peb-0.20b.tar.gz
tar -xzf peb-0.20b.tar.gz
cd peb_release
phpize</code></pre>
</div>
</div>
</li>
<li>
<p>Step 4: Now comes the tricky part, i.e. to run configure with special parameters. Find out where is the erl_interface package is installed, which was installed with erlang as a dependency and provides all the library and header files that will be required to configure the build script for peb. Get the first line (the installation path of erl_interface) of following command and use it in following step. I will refer this as <code>{$ERL_INTERFACE_PATH}</code> in the next step</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">rpm -ql erlang-erl_interface</code></pre>
</div>
</div>
</li>
<li>
<p>Step 5: Execute following command based on the architecture of your CentOS installation</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash"># use this if you have 64 bit architecture
./configure CC="gcc -m64 -L{$ERL_INTERFACE_PATH}/lib -I{$ERL_INTERFACE_PATH}/include" --enable-peb

# use this if you have 32 bit architecture
./configure CC="gcc -L{$ERL_INTERFACE_PATH}/lib -I{$ERL_INTERFACE_PATH}/include" --enable-peb</code></pre>
</div>
</div>
</li>
<li>
<p>Step 6: Now follow the rest of the steps mentioned in INSTALL document to install the php extension.</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">make
sudo make install</code></pre>
</div>
</div>
</li>
<li>
<p>Step 7: Edit php.ini to add the following line</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-ini" data-lang="ini">extension=peb.so</code></pre>
</div>
</div>
</li>
<li>
<p>Step 8: Restart your web server (usually apache httpd)</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">sudo service httpd restart</code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Now you have installed peb extension and ready to start play with examples explained in <a href="http://code.google.com/p/mypeb/w/list">peb wiki</a></p>
</div>
<div class="paragraph">
<p>Happy erlanging with php :-)</p>
</div>]]></description><link>https://mnishihan.github.io/2012/09/20/Installing-PHP-erlang-bridge-on-centos-62.html</link><guid isPermaLink="true">https://mnishihan.github.io/2012/09/20/Installing-PHP-erlang-bridge-on-centos-62.html</guid><category><![CDATA[bridge]]></category><category><![CDATA[erlang]]></category><category><![CDATA[peb]]></category><category><![CDATA[php]]></category><dc:creator><![CDATA[M N Islam Shihan]]></dc:creator><pubDate>Thu, 20 Sep 2012 00:00:00 GMT</pubDate></item></channel></rss>